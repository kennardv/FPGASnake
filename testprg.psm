;INCLUDE "ascii.psm"
;INCLUDE "uart.psm"					
;INCLUDE "ansi.psm"	

;declaration of NAMEREG
NAMEREG s5,uart
NAMEREG s4, direction
NAMEREG sA,color
NAMEREG sB,dark_light
NAMEREG sC,cursor
NAMEREG sD,cursor_H
NAMEREG sE,cursor_V
NAMEREG sF,screen

; declaration of inputs  
CONSTANT switch,02
CONSTANT uart_sp,00     					
CONSTANT clk_ms,07

; declaration of outputs  
CONSTANT led,02

mainlp:	CALL check_input
		LOAD uart,"X"
		CALL UART_TX
		CALL clear_screen
		CALL del250ms
		
;reference
;http://bluesock.org/~willg/dev/ansi.html	

; declaration of inputs 
CONSTANT rx,01
;CONSTANT uart_sp,00     					;Read status from UART

; declaration of outputs  
CONSTANT tx,01
CONSTANT uart_rp,01							;Reset UART buffers (Constant Optimised Port)

; declaration hardware constants
CONSTANT uart_tx_data,00000001'b 			;Tx		data_present - bit0
CONSTANT uart_tx_hfull,00000010'b    		;Tx		half_full - bit1
CONSTANT uart_tx_full,00000100'b         	;Tx		full - bit2
CONSTANT uart_tx_reset,00000001'b         	;Tx		reset
CONSTANT uart_rx_data,00001000'b 			;Rx		data_present - bit3
CONSTANT uart_rx_hfull,00010000'b    		;Rx		half_full - bit4
CONSTANT uart_rx_full,00100000'b         	;Rx		full - bit5
CONSTANT uart_rx_reset,00000010'b         	;Tx		reset

CONSTANT uart_reset,00000011'b           	;Tx,Rx	reset
CONSTANT uart_operate,00000000'b         	;Tx,Rx 	free to operate


UART_TX: 		INPUT s0, uart_sp			;check if buffer is full
				TEST s0, uart_tx_full
				JUMP nz, UART_TX			;wait if full
				OUTPUT uart, tx				;write character to buffer
				RETURN
				
UART_RX:		LOAD s1, 167'd				;timeout = 167 x (6 instructions x 2 clock cycles)
UART_TIMEOUT:	INPUT s0, uart_sp
				TEST s0, uart_rx_data		;Z=0 when data present
				JUMP nz, READ_RX
				SUB s1, 1'd
				RETURN Z					;Timeout returns with Z=1
				JUMP UART_TIMEOUT
				
READ_RX: 		OUTPUT uart, rx				;read character from buffer
				RETURN 
				
UART_RESET: 	OUTPUTK uart_reset, uart_rp
                OUTPUTK uart_operate, uart_rp
                RETURN 
				
;------------- 		ANSI Escape Sequences/codes			-------------;

start_esc:		LOAD uart, char_ESC 
				CALL UART_TX
				LOAD uart, char_LHOOK
				CALL UART_TX
				RETURN

; Ansi for screen colors	------------------;
				
color_screen:	CALL start_esc
				LOAD uart,dark_light
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart, "3"
				CALL UART_TX
				LOAD uart,color
				CALL UART_TX
				LOAD uart,"m"
				CALL UART_TX
				CALL del250ms              
				RETURN 

color_dark:		LOAD dark_light,"0"
				RETURN
color_light:	LOAD dark_light,"1"
				RETURN			
				
color_black:	LOAD color,"0"
				RETURN
color_blue:     LOAD color,"4"
				RETURN
color_green:    LOAD color,"2"
				RETURN
color_cyan:     LOAD color,"6" 
				RETURN
color_red:      LOAD color,"1" 
				RETURN
color_purple:   LOAD color,"5"
				RETURN
color_brown:    LOAD color,"3"
				RETURN
color_gray:     LOAD color,"7" 
				RETURN
color_yellow:   LOAD color,"3"
				RETURN
color_white:    LOAD color,"7" 
				RETURN

; Ansi for screen size	----------------------;
				
create_screen:	CALL start_esc			;put screen in indicated mode
				LOAD uart, "="
				CALL UART_TX
				LOAD uart, screen
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart,"0"
				CALL UART_TX
				LOAD uart,"h"
				CALL del250ms              
				RETURN 		
				
screen_mode_0:	LOAD screen,"0"			;Mode:40 x 25 black & white
				RETURN
screen_mode_1:	LOAD screen,"1"			;Mode:40 x 25 color
				RETURN
screen_mode_2:	LOAD screen,"2"			;Mode:80 x 25 b&w
				RETURN
screen_mode_3:	LOAD screen,"3"			;Mode:80 x 25 color
				RETURN
screen_mode_4:	LOAD screen,"4"			;Mode:320 x 200 color graphics
				RETURN
screen_mode_5:	LOAD screen,"5"			;Mode:320 x 200 b & w graphics
				RETURN
screen_mode_6:	LOAD screen,"6"			;Mode:640 x 200 b & w graphics
				RETURN
screen_mode_7:	LOAD screen,"7"			;Mode:to wrap at end of line
				RETURN
				
clear_screen: 	CALL start_esc			;clear screen and home cursor
				LOAD uart, "2"
				CALL UART_TX
				LOAD uart, "J"
				;CALL UART_TX
				CALL del250ms              
				RETURN 	
				
clear_all: 		CALL start_esc			;clear to end of line
				LOAD uart, "K"
				CALL UART_TX
				CALL del250ms              
				RETURN 				
				
;------ ANSI CURSOR CONTROL ------
cursor_home: 	CALL start_esc			;moves curser back home (position 0,0)
				;LOAD uart, cursor_V
				;CALL UART_TX
				;LOAD uart, ";"
				;CALL UART_TX
				;LOAD uart, cursor_H
				;CALL UART_TX
				LOAD uart, "H"
				CALL UART_TX
				RETURN 
				
cursor_to_num:	CALL start_esc
				LOAD uart, cursor_H		;select # of lines to move
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart, cursor_V		;select # of spaces to move
				CALL UART_TX
				LOAD uart, "f"
				CALL UART_TX
				RETURN

cursor_num:		CALL start_esc
				LOAD uart, cursor_H		;select # of lines/spaces to move - store cursor_H in uart
				CALL UART_TX
				LOAD uart, cursor_V		;select for up down left or right
				CALL UART_TX
				RETURN

cursor_up:		CALL start_esc
				;LOAD uart, cursor_V
				;CALL UART_TX
				LOAD uart, "A"
				CALL UART_TX
				RETURN
cursor_down:	CALL start_esc
				;LOAD uart, cursor_V
				;CALL UART_TX
				LOAD uart, "B"
				CALL UART_TX
				RETURN
cursor_right:	CALL start_esc
				;LOAD uart, cursor_H
				;CALL UART_TX
				LOAD uart, "C"
				CALL UART_TX
				RETURN
cursor_left:	CALL start_esc
				;LOAD uart, cursor_H
				;CALL UART_TX
				LOAD uart, "D"
				CALL UART_TX
				RETURN
cursor_save:	CALL start_esc			;save cursor position for recall later
				LOAD uart, "s"
				CALL UART_TX
				RETURN 
				
cursor_return:	CALL start_esc			;return to saved cursor position
				LOAD uart, "u"
				CALL UART_TX
				RETURN 
				
cursor_get_pos:	CALL start_esc			;reports current cursor line & column
				LOAD uart, "6"
				CALL UART_TX
				LOAD uart, "n"
				CALL UART_TX
				LOAD cursor_V, uart
				CALL UART_RX
				LOAD cursor_H, uart		;retrieve position row
				CALL UART_RX
				RETURN 
				
;------- CHECK INPUT ------
check_input:        INPUT     	direction, rx               ; READ THE UART EVEN IF EMPTY
                    COMPARE     direction, 7A               ;'z'
					CALL		move_up
                    COMPARE     direction, 64               ;'d'
                    CALL		move_right
                    COMPARE     direction, 73               ;'s'
                    CALL		move_down
                    COMPARE     direction, 71               ;'q'
                    CALL		move_left

move_up:			;CALL		cursor_get_pos
					SUB			cursor_V, 01
                    CALL        cursor_to_num
					RETURN
move_down:			;CALL		cursor_get_pos
					ADD			cursor_H, 01
                    CALL        cursor_to_num
					RETURN
move_left:			;CALL		cursor_get_pos
					SUB			cursor_V, 01
                    CALL        cursor_to_num
					RETURN
move_right:			;CALL		cursor_get_pos
					ADD			cursor_H, 01
                    CALL        cursor_to_num
					RETURN
					
;------------- 				DELAY						-------------;
delms:              input     s0, clk_ms
   delmslp:         input     s1, clk_ms
                    compare   s0, s1
                    jump      z, delmslp
                    return       

del250ms:           load      s2, 05
    del250mslp:     call      delms
                    add       s2, 01
                    jump      nz, del250mslp
                    return    
					
					
;---	ASCII		---;

;--- lijncodes
CONSTANT char_NULL,00			;NULL
CONSTANT char_BS,08  			;Back Space
CONSTANT char_SP,20				;Space
CONSTANT char_CR,0D 			;Carriage Return
CONSTANT char_LF,0A 			;Line feed
CONSTANT char_ESC,1B			;Escape
CONSTANT char_DEL,1F			;Delete

;--- Symbolen
CONSTANT char_LHOOK,5B			;[
CONSTANT char_RHOOK,5D			;]
CONSTANT char_COMMA,2C			;,
CONSTANT char_POINT,2E			;.
CONSTANT char_DPOINT,3A			;:
CONSTANT char_POINTCOMMA,3B		;;
CONSTANT char_EQUAL,3D			;=

;--- Hoofdletters
CONSTANT char_A,41
CONSTANT char_B,42
CONSTANT char_C,43
CONSTANT char_D,44
CONSTANT char_E,45
CONSTANT char_F,46
CONSTANT char_G,47
CONSTANT char_H,48
CONSTANT char_I,49
CONSTANT char_J,4A
CONSTANT char_K,4B
CONSTANT char_L,4C
CONSTANT char_M,4D
CONSTANT char_N,4E
CONSTANT char_O,4F
CONSTANT char_P,50
CONSTANT char_Q,51
CONSTANT char_R,52
CONSTANT char_S,53
CONSTANT char_T,54
CONSTANT char_U,55
CONSTANT char_V,56
CONSTANT char_W,57
CONSTANT char_X,58
CONSTANT char_Y,59
CONSTANT char_Z,5A

;--- Kleine letters
CONSTANT char_a,61
CONSTANT char_b,62
CONSTANT char_c,63
CONSTANT char_d,64
CONSTANT char_e,65
CONSTANT char_f,66
CONSTANT char_g,67
CONSTANT char_h,68
CONSTANT char_i,69
CONSTANT char_j,6A
CONSTANT char_k,6B
CONSTANT char_l,6C
CONSTANT char_m,6D
CONSTANT char_n,6E
CONSTANT char_o,6F
CONSTANT char_p,70
CONSTANT char_q,71
CONSTANT char_r,72
CONSTANT char_s,73
CONSTANT char_t,74
CONSTANT char_u,75
CONSTANT char_v,76
CONSTANT char_w,77
CONSTANT char_x,78
CONSTANT char_y,79
CONSTANT char_z,7A

