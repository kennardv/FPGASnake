;INCLUDE "ascii.psm"
;INCLUDE "uart.psm"					
;INCLUDE "ansi.psm"	
;declaration of NAMEREG
NAMEREG s5,uart
NAMEREG sA,color
NAMEREG sB,dark_light
NAMEREG sC,cursor
NAMEREG s9,eH
NAMEREG s8,tH
NAMEREG s3,eV
NAMEREG s4,tV
NAMEREG sF,screen
NAMEREG sD,direction
; declaration of inputs  
CONSTANT switch,02
CONSTANT uart_sp,00     					
CONSTANT clk_ms,07
; declaration of outputs  
CONSTANT led,02

init: 		LOAD eH, "5"
			LOAD tH, "0"
			LOAD eV, "5"
			LOAD tV, "0"
			call mainlp
			
mainlp:		call cursor_num
			call check_input
			call color_light
			call color_green
			load uart,3C
			call UART_TX
			call clear_screen
			jump mainlp
;reference
;http://bluesock.org/~willg/dev/ansi.html	
; declaration of inputs 
CONSTANT rx,01
;CONSTANT uart_sp,00     					;Read status from UART
; declaration of outputs  
CONSTANT tx,01
CONSTANT uart_rp,01							;Reset UART buffers (Constant Optimised Port)
; declaration hardware constants
CONSTANT uart_tx_data,00000001'b 			;Tx		data_present - bit0
CONSTANT uart_tx_hfull,00000010'b    		;Tx		half_full - bit1
CONSTANT uart_tx_full,00000100'b         	;Tx		full - bit2
CONSTANT uart_tx_reset,00000001'b         	;Tx		reset
CONSTANT uart_rx_data,00001000'b 			;Rx		data_present - bit3
CONSTANT uart_rx_hfull,00010000'b    		;Rx		half_full - bit4
CONSTANT uart_rx_full,00100000'b         	;Rx		full - bit5
CONSTANT uart_rx_reset,00000010'b         	;Tx		reset
CONSTANT uart_reset,00000011'b           	;Tx,Rx	reset
CONSTANT uart_operate,00000000'b         	;Tx,Rx 	free to operate
UART_TX: 		INPUT s0, uart_sp			;check if buffer is full
				TEST s0, uart_tx_full
				JUMP nz, UART_TX			;wait if full
				OUTPUT uart, tx				;write character to buffer
				RETURN
				
UART_RX:		LOAD s1, 167'd				;timeout = 167 x (6 instructions x 2 clock cycles)
UART_TIMEOUT:	INPUT s0, uart_sp
				TEST s0, uart_rx_data		;Z=0 when data present
				JUMP nz, READ_RX
				SUB s1, 1'd
				RETURN Z					;Timeout returns with Z=1
				JUMP UART_TIMEOUT
				
READ_RX: 		OUTPUT uart, rx				;read character from buffer
				RETURN 
				
UART_RESET: 	OUTPUTK uart_reset, uart_rp
                OUTPUTK uart_operate, uart_rp
                RETURN 
				
;------------- 		ANSI Escape Sequences/codes			-------------;
start_esc:		LOAD uart, char_ESC 
				CALL UART_TX
				LOAD uart, char_LHOOK
				CALL UART_TX
				RETURN
; Ansi for screen colors	------------------;
				
color_screen:	CALL start_esc
				LOAD uart,dark_light
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart, "3"
				CALL UART_TX
				LOAD uart,color
				CALL UART_TX
				LOAD uart,"m"
				CALL UART_TX
				CALL del250ms              
				RETURN 
color_dark:		LOAD dark_light,"0"
				RETURN
color_light:	LOAD dark_light,"1"
				RETURN			
				
color_black:	LOAD color,"0"
				RETURN
color_blue:     LOAD color,"4"
				RETURN
color_green:    LOAD color,"2"
				RETURN
color_cyan:     LOAD color,"6" 
				RETURN
color_red:      LOAD color,"1" 
				RETURN
color_purple:   LOAD color,"5"
				RETURN
color_brown:    LOAD color,"3"
				RETURN
color_gray:     LOAD color,"7" 
				RETURN
color_yellow:   LOAD color,"3"
				RETURN
color_white:    LOAD color,"7" 
				RETURN
; Ansi for screen size	----------------------;
				
create_screen:	CALL start_esc			;put screen in indicated mode
				LOAD uart, "="
				CALL UART_TX
				LOAD uart, screen
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart,"0"
				CALL UART_TX
				LOAD uart,"h"
				CALL del250ms              
				RETURN 		
				
screen_mode_0:	LOAD screen,"0"			;Mode:40 x 25 black & white
				RETURN
screen_mode_1:	LOAD screen,"1"			;Mode:40 x 25 color
				RETURN
screen_mode_2:	LOAD screen,"2"			;Mode:80 x 25 b&w
				RETURN
screen_mode_3:	LOAD screen,"3"			;Mode:80 x 25 color
				RETURN
screen_mode_4:	LOAD screen,"4"			;Mode:320 x 200 color graphics
				RETURN
screen_mode_5:	LOAD screen,"5"			;Mode:320 x 200 b & w graphics
				RETURN
screen_mode_6:	LOAD screen,"6"			;Mode:640 x 200 b & w graphics
				RETURN
screen_mode_7:	LOAD screen,"7"			;Mode:to wrap at end of line
				RETURN
				
clear_screen: 	CALL start_esc			;clear screen and home cursor
				LOAD uart, "2"
				CALL UART_TX
				LOAD uart, "J"
				CALL UART_TX
				CALL del250ms              
				RETURN 	
				
clear_all: 		CALL start_esc			;clear to end of line
				LOAD uart, "K"
				CALL UART_TX
				CALL del250ms              
				RETURN 				
				
; Ansi for cursor	--------------------------;
cursor_home: 	CALL start_esc			;moves curser back home (position 0,0)
				LOAD uart, "H"
				CALL UART_TX
				CALL del250ms 
				RETURN 
				
cursor_to_num:	CALL start_esc
				LOAD uart, "5"		;select # of lines to move
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart, "5"		;select # of spaces to move
				CALL UART_TX
				LOAD uart, "H"
				CALL UART_TX
				call del250ms
				RETURN
cursor_num:		CALL start_esc
				LOAD uart, tV		;select # of lines to move
				CALL UART_TX
				LOAD uart, eV		;select # of lines to move
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart, tH		;select # of lines to move
				CALL UART_TX
				LOAD uart, eH		;select # of spaces to move
				CALL UART_TX
				LOAD uart, "H"
				CALL UART_TX
				call del250ms
				RETURN

check_input:    INPUT     	direction, rx               ; READ THE UART EVEN IF EMPTY
                COMPARE     direction, 7A               ;'z'
                CALL        Z, cursor_up
                COMPARE     direction, 64               ;'d'
                CALL        Z, cursor_right
                COMPARE     direction, 73               ;'s'
                CALL        Z, cursor_down
                COMPARE     direction, 71               ;'q'
                CALL        Z, cursor_left				
				RETURN

add_tV:			LOAD eV, "0"
				ADD tV, 1'd
				return

add_tH:			LOAD eH, "0"
				ADD tH, 1'd
				return
				
sub_tV:			LOAD eV, "9"
				SUB tV, 1'd
				return

sub_tH:			LOAD eH, "9"
				SUB tH, 1'd
				return
				
cursor_up:		SUB eV, 1'd
				COMPARE	eV, "0"
				call z,sub_tV
				CALL del250ms
				RETURN
				
cursor_down:	ADD eV, 1'd
				COMPARE eV, char_DPOINT
				call z, add_tV
				CALL del250ms
				RETURN
				

				
				
cursor_right:	ADD eH, 1'd
				COMPARE	eH,char_DPOINT
				call z,add_tH
				CALL del250ms
				RETURN
				
cursor_left:	SUB eH, 1'd
				COMPARE	eH, "0"
				call z,sub_tH
				call del250ms
				RETURN
				
cursor_save:	CALL start_esc			;save cursor position for recall later
				LOAD uart, "s"
				CALL UART_TX
				CALL del250ms 
				RETURN 
				
cursor_return:	CALL start_esc			;return to saved cursor position
				LOAD uart, "u"
				CALL UART_TX
				CALL del250ms 
				RETURN 
				
cursor_get_pos:	CALL start_esc			;reports current cursor line & column
				LOAD uart, "#"
				CALL UART_TX
				LOAD uart, ";"
				CALL UART_TX
				LOAD uart, "#"
				CALL UART_TX
				;LOAD uart, "R"
				CALL UART_TX
				CALL UART_RX			;retrieve position line
				LOAD eH, uart
				CALL UART_RX
				LOAD eV, uart		;retrieve position row
				;CALL del250ms 
				RETURN 
				
;------------- 				DELAY						-------------;
delms:              input     s0, clk_ms
   delmslp:         input     s1, clk_ms
                    compare   s0, s1
                    jump      z, delmslp
                    return       
del250ms:           load      s2, 05
    del250mslp:     call      delms
                    add       s2, 01
                    jump      nz, del250mslp
                    return    
					
					
;---	ASCII		---;
;--- lijncodes
CONSTANT char_NULL,00			;NULL
CONSTANT char_BS,08  			;Back Space
CONSTANT char_SP,20				;Space
CONSTANT char_CR,0D 			;Carriage Return
CONSTANT char_LF,0A 			;Line feed
CONSTANT char_ESC,1B			;Escape
CONSTANT char_DEL,1F			;Delete
;--- Symbolen
CONSTANT char_LHOOK,5B			;[
CONSTANT char_RHOOK,5D			;]
CONSTANT char_COMMA,2C			;,
CONSTANT char_POINT,2E			;.
CONSTANT char_DPOINT,3A			;:
CONSTANT char_POINTCOMMA,3B		;;
CONSTANT char_EQUAL,3D			;=
;--- Hoofdletters
CONSTANT char_A,41
CONSTANT char_B,42
CONSTANT char_C,43
CONSTANT char_D,44
CONSTANT char_E,45
CONSTANT char_F,46
CONSTANT char_G,47
CONSTANT char_H,48
CONSTANT char_I,49
CONSTANT char_J,4A
CONSTANT char_K,4B
CONSTANT char_L,4C
CONSTANT char_M,4D
CONSTANT char_N,4E
CONSTANT char_O,4F
CONSTANT char_P,50
CONSTANT char_Q,51
CONSTANT char_R,52
CONSTANT char_S,53
CONSTANT char_T,54
CONSTANT char_U,55
CONSTANT char_V,56
CONSTANT char_W,57
CONSTANT char_X,58
CONSTANT char_Y,59
CONSTANT char_Z,5A
;--- Kleine letters
CONSTANT char_a,61
CONSTANT char_b,62
CONSTANT char_c,63
CONSTANT char_d,64
CONSTANT char_e,65
CONSTANT char_f,66
CONSTANT char_g,67
CONSTANT char_h,68
CONSTANT char_i,69
CONSTANT char_j,6A
CONSTANT char_k,6B
CONSTANT char_l,6C
CONSTANT char_m,6D
CONSTANT char_n,6E
CONSTANT char_o,6F
CONSTANT char_p,70
CONSTANT char_q,71
CONSTANT char_r,72
CONSTANT char_s,73
CONSTANT char_t,74
CONSTANT char_u,75
CONSTANT char_v,76
CONSTANT char_w,77
CONSTANT char_x,78
CONSTANT char_y,79
CONSTANT char_z,7A